var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var ticketStatus = cons.ticketStatus;
var gameType = cons.gameType;


var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;
var game = config.game;


var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var kvSer = service.kvSer;

var validateFac = require("mcp_cp").validateFac;

var ChannelTradeControl = function(){
    var self = this;
    self.cmd = {'CT01':1, 'CT02':2, 'CT03':3, 'CT04':4,
    'CT05':5};
    self.cmdArray = [{},
        {id:1, code:'CT01', fromType:prop.digestFromType.FIX, des:""},
        {id:2, code:'CT02', fromType:prop.digestFromType.FIX, des:""},
        {id:3, code:'CT03', fromType:prop.digestFromType.FIX, des:"投注"},
        {id:4, code:'CT04', fromType:prop.digestFromType.FIX, des:""},
        {id:5, code:'CT05', fromType:prop.digestFromType.FIX, des:""}
    ];
    self.pTypeToKey = {"T5101":"hhad", "T5102":"had", "T5103":"crs", "T5104":"ttg", "T5105":"hafu", "T5201":"hdc", "T5202":"mnl", "T5203":"wnm", "T5204":"hilo" };
    self.oddsTrans  = {"T51013":"win","T51011":"level","T51010":"lose","T51023":"win","T51021":"level","T51020":"lose",
        "T510310":"oneToZero","T510320":"twoToZero","T510321":"twoToOne","T510330":"threeToZero","T510331":"threeToOne","T510332":"threeToTwo","T510340":"fourToZero","T510341":"fourToOne",
        "T510342":"fourToTwo","T510350":"fiveToZero","T510351":"fiveToOne","T510352":"fiveToTwo","T510301":"zeroToOne","T510302":"zeroToTwo","T510312":"oneToTwo","T510303":"zeroToThree",
        "T510313":"oneToThree","T510323":"twoToThree","T510304":"zeroToFour","T510314":"oneToFour","T510324":"twoToFour","T510305":"zeroToFive","T510315":"oneToFive","T510325":"twoToFive",
        "T510300":"zeroToZero","T510311":"oneToOne","T510322":"twoToTwo","T510333":"threeToThree","T510390":"winOther","T510309":"lostOther","T510399":"levelOther",
        "T510433":"winWinRate","T510431":"winLevelRate","T510430":"winLoseRate","T510413":"levelWinRate","T510411":"levelLevelRate","T510410":"levelLoseRate","T510403":"loseWinRate",
        "T510401":"loseLevelRate","T510400":"loseLoseRate",
        "T51050":"totalGoal0Rate", "T51051":"totalGoal1Rate", "T51052":"totalGoal2Rate", "T51053":"totalGoal3Rate", "T51054":"totalGoal4Rate", "T51055":"totalGoal5Rate", "T51056":"totalGoal6Rate", "T51057":"totalGoal7Rate",
        "T52011":"win","T52012":"lose","T52021":"win",
        "T52022":"lose","T520301":"hostWin1","T520302":"hostWin2","T520303":"hostWin3","T520304":"hostWin4","T520305":"hostWin5","T520306":"hostWin6",
        "T520311":"guestWin1","T520312":"guestWin2","T520313":"guestWin3","T520314":"guestWin4","T520315":"guestWin5","T520316":"guestWin6",
        "T52041":"big","T52042":"small",
    }
};

ChannelTradeControl.prototype.handle = function(headNode, bodyStr, userCb)
{
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function(cb)
        {
            var cmd = self.cmd[headNode.cmd];
            if(cmd == undefined)
            {
                cb(ec.E9000);
            }
            else
            {
                cb(null);
            }
        },
        //校验头的用户类型是否合法
        function(cb)
        {
            var userTypeId = userType[headNode.userType];
            if(userTypeId == undefined)
            {
                cb(ec.E9005);
            }
            else
            {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function(userTypeId, cb)
        {
            var cmd = self.cmdArray[self.cmd[headNode.cmd]];
            digestSer.getKey({fromType:cmd.fromType, userId:headNode.userId, userType:userTypeId},
            function(err, key){
                cb(err, key);
            });
        },
        //先解密
        function(key, cb)
        {
            log.info(key);
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if(decodedBodyStr == null)
            {
                cb(ec.E9003);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err)
            {
                cb(ec.E2058);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function(bodyNode, cb){
            var method = 'check' + headNode.cmd;
            self[method](null, headNode, bodyNode, function(err){
                if(err)
                {
                    cb(err, {uniqueId:bodyNode.uniqueId});
                }
                else
                {
                    cb(err, bodyNode);
                }
            });
        },
        //业务处理
        function(bodyNode, cb){
            var cmd = 'handle' + headNode.cmd;
            self[cmd](null, headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


ChannelTradeControl.prototype.checkCT01 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT02 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var order = bodyNode.order;
    //订单不能为空
    if(order == undefined || order == null)
    {
        log.error("参数错误,未能找到order对象")
        log.error(ec.E2070);
        cb(ec.E2070, null);
        return;
    }
    order.customerId = headNode.userId;
    validateFac.validate(order, cb);
};

ChannelTradeControl.prototype.checkCT04 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT05 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT06 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT07 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};

ChannelTradeControl.prototype.checkCT08 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


ChannelTradeControl.prototype.checkCT09 = function(user, headNode, bodyNode, cb)
{
    cb(null);
};


/**
 * find one's all operations
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT01 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 获取权限树
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT02 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 渠道投注接口
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT03 = function(user, headNode, bodyNode, cb)
{
    var self = this;
    var backBodyNode = {};
    var now = new Date().getTime();
    var customerId = headNode.userId;
    var order = bodyNode.order;
    var tickets = bodyNode.order.tickets;
    var trueAmount = 0;
    for(var key in tickets)
    {
        if(tickets[key].ec.repCode == ec.E0000.repCode)
        {
            trueAmount += tickets[key].amount;
        }
        else
        {
            log.info(tickets[key]);
        }
    }
    order.trueAmount = trueAmount;
    if(trueAmount <= 0)     //如果订单失败，记录每个票据失败的原因，直接返回
    {
        var backOrder = {};
        backOrder.outerId = order.outerId;
        backOrder.amount = order.amount;
        backOrder.trueAmount = order.trueAmount;
        var backTickets = [];
        for(var key in tickets)
        {
            var ticket = tickets[key];
            backTickets[backTickets.length] = {outerId:ticket.outerId,
                amount:ticket.amount, repCode:ticket.ec.repCode,
                description:ticket.ec.description};
        }
        backOrder.tickets = backTickets;
        backBodyNode.order = backOrder;
        cb(ec.E2069, backBodyNode);
        return;
    }
    async.waterfall([
        //增加判断金额是否足够收单
        function(cb){
            var table = dc.mg.get("account");
            table.findOne({"_id": headNode.userId}, {}, [], function(err ,data){
                if(data.balance < order.amount){
                    cb(ec.E2067, null, null);
                }else{
                    cb(null);
                }
            });
        },
        //生成订单号
        function(cb)
        {
            kvSer.getOrderId(function(err, data){
                cb(err, data);
            });
        },
        //保存票据
        function(kv, cb)
        {
            order.id = kv.value;
            var table = dc.main.get("tticket");
            var tickets = bodyNode.order.tickets;
            async.each(tickets, function(ticket, callback) {
                ticket.createTime = now;
                //如果未设置审计时间，则使用创建时间
                if(ticket.auditTime == undefined || ticket.auditTime == null)
                {
                    ticket.auditTime = now;
                }
                else
                {
                    ticket.auditTime = dateUtil.toDate(ticket.auditTime).getTime();
                }
                ticket.customerId = customerId;
                ticket.bonus = 0;
                ticket.bonusBeforeTax = 0;
                ticket.orderId = order.id;
                if(prop.jcrunumber){
                    try{
                        self.getrNumber(ticket, function(err, result){
                            log.info(result);
                            ticket.rNumber = result;
                        });
                    }catch (err){
                        log.error(err);
                    }

                }

                if(ticket.ec.repCode != ec.E0000.repCode)
                {
                    ticket.id = '';
                    callback();
                    return;
                }
                table.save(ticket, [], function(err, data){
                    if(err){
                        if(err.code == 'ER_DUP_ENTRY'){
                            ticket.ec = ec.E2006;
                            order.trueAmount = order.trueAmount - ticket.amount;
                            callback(null);
                        }else{
                            callback(err);
                        }
                    }
                    if(data)
                    {
                        ticket.id = data.insertId;
                        callback(null);
                    }
                });
            }, function(err){
                cb(err, order, tickets);
            });
        },
        //保存订单
        function(order, tickets, cb)
        {
            if(order.trueAmount <= 0)     //如果订单失败，记录每个票据失败的原因，直接返回
            {
                cb(ec.E2069, order, tickets);
            }else{
                var table = dc.main.get("torder");
                order.createTime = now;
                table.save(order, [], function(err, data){
                    cb(err, order, tickets);
                });
            }
        },
        //扣款
        function(order, tickets, cb)
        {
            var table = dc.main.get("tticket");
            moneySer.handle(customerId, order.id, "channel", "cash", "out", "lot", order.trueAmount, {}, function(err, data){
                log.info(data);
                if(err){
                    //删除投注成功的单子
                    table.remove({orderId: order.id},{}, function(err, data){
                        cb(err, null, null);
                    })
                }else{
                    cb(err, order, tickets);
                }
            });
        },
        //保存到出票队列
        function(order, tickets, cb)
        {
            var table = dc.mg.get("printqueen");
            var termTable = dc.main.get("term");
            async.each(tickets, function(ticket, callback) {
                //只有成功的票才能保存到出票队列
                if(ticket.ec.repCode != ec.E0000.repCode)
                {
                    callback();
                    return;
                }
                var ticketGame = game.getInfo(ticket.gameCode);
                //如果是竞猜则出票的closetime是第一期的
                var cond = {id:ticket.gameCode + "_" + ticket.termCode};
                if(ticketGame.type == gameType.Jingcai)
                {
                   cond = {id:ticket.gameCode + "_" + ticket.oneTermCode};
                }
                var cols = {closeTime:1, code:1};
                termTable.findOne(cond, cols ,[] , function(err , data){
                    if(err){
                        callback(err);
                    }else{

                        var pTicket = {_id:ticket.id, gameCode:ticket.gameCode, termCode:ticket.termCode, customerId:ticket.customerId,
                            pType:ticket.pType, bType:ticket.bType, printId:ticket.printId, multiple:ticket.multiple,
                            amount:ticket.amount, number:ticket.number,rNumber:ticket.rNumber, outerId:ticket.outerId, status:ticketStatus.UN_OPEN,presetTerminal:ticket.persetTerminal,
                            printStatus:ticket.printStatus, printQueenStatus:ticketPrintQueenStatus.WAITING_GET, createTime:ticket.createTime,closeTime:data.closeTime};
                        table.save(pTicket, [], function(err, data){
                            callback(err);
                        });
                    }
                });
            }, function(err){
                cb(err, order, tickets);
            });
        }
    ], function (err, order, tickets) {
        if(err)
        {
            log.error(err);
            if(err.repCode){
                if(order){
                    var backOrder = {};
                    backOrder.id = order.id;
                    backOrder.outerId = order.outerId;
                    backOrder.amount = order.amount;
                    backOrder.trueAmount = order.trueAmount;

                    var backTickets = [];
                    for(var key in tickets)
                    {
                        var ticket = tickets[key];
                        backTickets[backTickets.length] = {id:ticket.id, outerId:ticket.outerId,
                            amount:ticket.amount, repCode:ticket.ec.repCode,
                            description:ticket.ec.description};
                    }
                    backOrder.tickets = backTickets;
                    backBodyNode.order = backOrder;
                    cb(err, backBodyNode);
                }else{
                    cb(err, backBodyNode);
                }
            }else{
                backBodyNode = ec.E9999;
                cb(err, backBodyNode);
            }
        }
        else
        {
            var backOrder = {};
            backOrder.id = order.id;
            backOrder.outerId = order.outerId;
            backOrder.amount = order.amount;
            backOrder.trueAmount = order.trueAmount;

            var backTickets = [];
            for(var key in tickets)
            {
                var ticket = tickets[key];
                backTickets[backTickets.length] = {id:ticket.id, outerId:ticket.outerId,
                amount:ticket.amount, repCode:ticket.ec.repCode,
                description:ticket.ec.description};
            }
            backOrder.tickets = backTickets;
            backBodyNode.order = backOrder;
            cb(err, backBodyNode);
        }
    });
};

/**
 * 删除消息
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT04 = function(user, headNode, bodyNode, cb)
{
};

/**
 * 修改期次
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
ChannelTradeControl.prototype.handleCT05 = function(user, headNode, bodyNode, cb)
{
};

ChannelTradeControl.prototype.getrNumber = function(ticket, cb){
    var self = this;
    var odds = dc.mg.get("jcodds");
    async.waterfall([
        function(cb){
            var gameData = game.getInfo(ticket.gameCode);
            if(gameData.type == gameType.Jingcai) {
                var temp = ticket.number.split(";");
                log.info(temp);
                log.info(temp.length);
                var array = new Array();
                async.eachSeries(temp, function(matchinfo, callback){
                    var match = matchinfo.split("|");
                    var result = match[2].split(",");
                    var key = ticket.gameCode + match[0];
                    var cond = {};
                    cond._id = ticket.gameCode +"_"+ match[1];
                    var filelds = {};
                    var column = self.pTypeToKey[key];
                    filelds[column] = 1;
                    odds.findOne(cond, filelds, {}, function(err, data){
                        if(err){
                             log.error(err);
                             cb(err);
                        }else{
                            if(data && data!= null){
                                var tempArray = new Array();
                                var currOddsInfo = data[column];

                                for(var j = 0; j < result.length ; j++) {
                                    var tempstr = "";
                                    var oddsKey = ticket.gameCode+match[0]+result[j];
                                    log.info(oddsKey);
                                    log.info();
                                    if(result[j].indexOf("@") < 0 && self.oddsTrans[oddsKey]) {
                                        if(ticket.gameCode == 'T52' && (match[0] == '01' || match[0]  == '04' )){
                                            tempstr = result[j] + "(" + currOddsInfo["fixedodds"] + ")@" + currOddsInfo[self.oddsTrans[oddsKey]];
                                        }else{
                                            tempstr = result[j] +"@" + currOddsInfo[self.oddsTrans[oddsKey]];
                                        }
                                    }else{
                                        tempstr = result[j];
                                    }
                                    log.info(11111);
                                    log.info(tempstr);
                                    tempArray.push(tempstr);
                                }
                                array.push(match[0]+"|"+match[1]+"|"+tempArray.join(","));
                               callback();
                            }else{
                               callback("没有查询到该赔率");
                            }
                        }
                    });
                }, function(err){
                    cb(null, array);
                });
            }else{
                cb(null, null);
            }
        }
    ], function (err, result) {
           if(result && result != null && result.length >0){
                cb(null, result.join(";"));
           }else{
               cb(null, null);
           }
    })
}

var channelTradeControl = new ChannelTradeControl();
module.exports = channelTradeControl;