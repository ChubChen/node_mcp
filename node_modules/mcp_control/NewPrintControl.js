var async = require('async');
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var pageUtil = esut.pageUtil;
var dateUtil = esut.dateUtil;
var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userType = cons.userType;
var msgStatus = cons.msgStatus;
var msgType = cons.msgType;
var ticketPrintQueenStatus = cons.ticketPrintQueenStatus;
var ticketPrintStatus = cons.ticketPrintStatus;
var termStatus = cons.termStatus;
var gameGrade = cons.gameGrade;
var ticketStatus = cons.ticketStatus;


var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require("mcp_service");
var digestSer = service.digestSer;
var moneySer = service.moneySer;
var kvSer = service.kvSer;
var ticketSer = service.ticketSer;
var notifySer = service.notifySer;
var termSer = service.termSer;
var userId = "C0001";

var factory = require('mcp_factory');
var transUtil = factory.transUtil;


var NewNewPrintControl = function(){
};


/**
 * 取票
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
NewNewPrintControl.prototype.sendTicket = function(data, cb)
{
    var self = this;
    var backBodyNode = {};
    var table = dc.mg.get("printqueen");
    //pageUtil.parsePost(bodyNode);
    var now = new Date().getTime();
    var limit = 10;
    var count = 0;
    var hasNext = true;
    var rst = [];

    async.whilst(
        function() { return count < limit && hasNext},
        function(whileCb) {
            var cond = {printQueenStatus:ticketPrintQueenStatus.WAITING_GET, printId:userId};
            var sort = {createTime:1,colseTime:-1};
            var doc = {$set:{printQueenStatus:ticketPrintQueenStatus.TAKE_AWAY,
                takeTime:now}};
            table.findAndModify(cond, sort, doc, [], function(err, data){
                if(data)
                {
                    data.id = data._id;
                    delete data._id;
                    delete data.version;
                    delete data.status;
                    delete data.printId;
                    rst[rst.length] = data;
                }
                else
                {
                    hasNext = false;
                }
                count++;
                whileCb();
            });
        },
        function(err) {
            //数据转换
            rst = transUtil.transData(rst)
            backBodyNode.rst = rst;
            cb(err, backBodyNode.rst);
        }
    );
};

/**
 * 出票返回
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
NewNewPrintControl.prototype.reciveTicket = function(data, cb)
{
    var self = this;
    var backBodyNode = {};
    //数据转换
    var objs = transUtil.transDataRecive(data);
    if(!objs || objs.length == 0)
    {
        cb(ec.E2070, null);
        return;
    }
    var table = dc.mg.get("printqueen");
    async.eachSeries(objs, function(ticket, callback) {
        if(typeof(ticket.id) == "string" ){
            ticket.id = parseInt(ticket.id, 10);
        }
        var cond = {_id:ticket.id};
        var sort = {};
        //如果未打印时间，则使用创建时间
        if(ticket.printTime != undefined && ticket.printTime != null)
        {
            ticket.printTime = dateUtil.toDate(ticket.printTime).getTime();
        }
        if(ticket.cashTime != undefined && ticket.cashTime != null)
        {
            ticket.cashTime = dateUtil.toDate(ticket.cashTime).getTime();
        }
        if(ticket.status == ticketPrintStatus.PRINT_SUCCESS)
        {
            ticketSer.printSuccess(ticket, function(err, backTicket){
                if(err)
                {
                    log.info(err);
                    callback();
                    return;
                }
                backTicket.id = backTicket._id;
                delete backTicket._id;
                delete backTicket.takeTime;
                delete backTicket.version;
                delete backTicket.printQueenStatus;

                backTicket.province = ticket.province;
                backTicket.seq = ticket.seq;
                backTicket.terminal = ticket.terminal;
                backTicket.printTime = dateUtil.toString(ticket.printTime);
                backTicket.cashTime = dateUtil.toString(ticket.cashTime);
                backTicket.prizeTime = dateUtil.toString(ticket.prizeTime);
                backTicket.cashTerminal = dateUtil.toString(ticket.cashTerminal);

                notifySer.saveTicket(backTicket, function(err, data){
                    callback(err);
                });
            });
        }
        else
        {
            callback();
        }
    }, function(err){
        cb(err, backBodyNode);
    });
};


/**
 * 取兑奖的结果
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
NewNewPrintControl.prototype.prizeTicket = function(data, cb)
{
    var self = this;
    var backBodyNode = {};
    var tticket = dc.main.get("tticket");
    //pageUtil.parsePost(bodyNode);
    var now = new Date().getTime();
    var limit = 10;
    var count = 0;
    var cond = {status: ticketStatus.HIT};
    var rst = [];

    async.waterfall([
        function(cb)
        {
            var cursor = tticket.find(cond, {}, []).sort({createTime:1}).limit(count, limit);
            cursor.toArray(function(err, data) {
                async.eachSeries(data, function (ticket, callback) {
                    tticket.update({id:ticket.id}, {status:ticketStatus.HITING}, [], function (err, data) {
                        if (err) {
                            log.error("严重错误，获取兑奖信息，更新状态失败！");
                        }else{
                            rst.push(ticket);
                        }
                    });
                }, function (err) {
                    //数据转换
                    rst = transUtil.transData(rst);
                    backBodyNode.rst = rst;
                    cb(err, backBodyNode.rst);
                });
             });
        }
    ], function (err, rst) {
        cb(err, backBodyNode);
    });
};
/**
 * 兑奖返回
 * @param user
 * @param headNode
 * @param bodyNode
 * @param cb
 */
NewPrintControl.prototype.recivePrizeTicket = function(data, cb)
{
    var self = this;
    var backBodyNode = {};
    //数据转换
    var objs = transUtil.transDataRecive(data);
    if(!objs || objs.length == 0)
    {
        cb(ec.E2070, null);
        return;
    }
    async.eachSeries(objs, function(ticket, callback) {
        var newTicket = {};
        if(typeof(ticket.id) == "string" ){
            ticket.id = parseInt(ticket.id, 10);
        }
        newTicket.id = ticket.id;
        newTicket.cashTerminal = ticket.cashTerminal;
        newTicket.cashTime = ticket.cashTime;
        newTicket.cashAmount = ticket.cashAmount;
        log.info("获得兑奖P06回执的信息"+newTicket);
        ticketSer.cashBack(newTicket,function(err){
               callback(err);
        });
    }, function(err){
        cb(err, backBodyNode);
    });
};


var NewPrintControl = new NewPrintControl();
module.exports = NewPrintControl;
