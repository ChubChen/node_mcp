/**
 * Created by CH on 15-6-12.
 */
var CronJob = require("cron").CronJob;
var async = require('async');
var moment = require("moment");
var dc = require('mcp_db').dc;
var prop = require('mcp_config').prop;
var ec = require('mcp_config').ec;
var esut = require("easy_util");
var dateUtil = esut.dateUtil;
var log = esut.log;
var digestUtil = esut.digestUtil;

var fs = require("fs");
var path = require("path");

var mcpUtil = require("mcp_util");
var fsUtil = mcpUtil.fsUtil;
var strBuffer = mcpUtil.strBuffer;
var xmlUtil = mcpUtil.xmlUtil;
var ftpClient = require("ftp");


var LotDetailJob = function(dTerm){
    var self = this;
    self.dTerm = dTerm;
    var dir = "/data/app/issue/channel";
    var now = moment(dTerm.closeTime);
    self.dTermDir = path.join(dTerm.gameCode, now.format('YYYYMM'), now.format('DD'), dTerm.code);
    self.baseDir = path.join(dir, self.dTermDir);
    self.fileName = 'LotDetail.txt';
    self.logStart = "gameCode:" + dTerm.gameCode + ",termCode:" + dTerm.code + ",算奖文件生成,";
};

LotDetailJob.prototype.createChannelFile = function (cb) {
    var self = this;
    var cond = "gameCode='" + self.dTerm.gameCode + "' and termCode='" + self.dTerm.code + "'";
    async.waterfall([
        //查询当前游戏当前期 所有出过票的用户
        function (cb) {
            var conn = dc.main.getConn();
            var sql = "select concat(customerId,'&',sum(amount)) as 'key' from tticket where "+ cond +" group by customerId";
            log.info(sql);
            conn.execute(sql, [], function (err , data) {
                if(err){
                    cb(err);
                }else{
                    log.info("所有销售渠道"+data);
                    cb(null, data);
                }
            })
        },
        //生成每个渠道文件
        function (customerArray, cb) {
            var customerIdAarr = new Array();
            if(customerArray != undefined && customerArray!= null){
                async.eachSeries(customerArray, function(customer, callback){
                    log.info("生成渠道是:" + customer.key);
                    var customers = customer.key.split("&");
                    var head = {};
                    customerIdAarr.push(customers[0]);
                    head.userId = customers[0];
                    head.gameCode = self.dTerm.gameCode;
                    head.termCode = self.dTerm.code;
                    head.lotTotalAmount = customers[1];
                   self._writeFile(head, function(err){
                       callback(err);
                   })
                }, function (err) {
                    cb(err, customerIdAarr);
                });
            }else{
                cb(null);
            }
        },
        //通过ftp功能上送到,服务器上。
        function (customerIdAarr, cb) {
            var client = new ftpClient();
            client.connect(prop.ftp);
            client.on('ready', function(){
                async.eachSeries(customerIdAarr, function(customerid, callback){
                    var ftpDir = path.join(customerid, self.dTermDir);
                    log.info(ftpDir);
                    client.mkdir(ftpDir, true, function(err){
                        if(err){
                            callback(err);
                        }else{
                            log.info("put local" + path.join(self.baseDir, customerid+"_"+self.fileName)+ "To remote"+ path.join(ftpDir, self.fileName) );
                            client.append(path.join(self.baseDir, customerid+"_"+self.fileName), path.join(ftpDir, self.fileName), function(){
                                callback(null);
                            });
                        }
                    });
                },function(err){
                    client.end();//断开连接
                    cb(err, "向ftp服务器上面发送文件失败");
                })
            })
            client.on('err', function(err){
                cb(err, "连接ftp服务器失败");
            });
        }
    ], function (err) {
        cb(err);
    })
}

LotDetailJob.prototype._writeFile = function(head ,cb){
    var self = this;
    var cond = "gameCode='" + self.dTerm.gameCode + "' and termCode='" + self.dTerm.code + "'";
    async.waterfall([
        function(cb){
            var conn = dc.main.getConn();
            var sql = "select sum(amount) as succAmount, count(id) as succCount from tticket where "+ cond +" and  printStatus = 1300 and customerid = '" +head.userId+ "'"; //出票成功金额和 数量
            conn.execute(sql, [], function (err , data) {
                if(err){
                    cb(err);
                }else{
                    if(data != null){
                        head.successCount = data[0].succCount;
                        head.successAmount = data[0].succAmount;
                        cb(null, data);
                    }else{
                        cb("没有该用户数据" + head.userId);
                    }
                }
            })
        },
        //
        function(successObj, cb){
            if(successObj){
                var conn = dc.main.getConn();
                var sql = "select outerId,pType,bType,amount,multiple,number, IF(ISNULL(printTime),'', FROM_UNIXTIME((printtime/1000), '%Y-%m-%d %H:%i:%s')) as printTime from tticket where "+ cond +" and  printStatus = 1300 and customerid = '" +head.userId+ "'"; //出票成功金额和 数量
                log.info(sql);
                var split = "^";
                conn.execute(sql, [], function(err, data){
                    if(err){
                        log.error(err);
                        cb(err);
                    }else{
                        var writeData = fs.createWriteStream(path.join(self.baseDir, head.userId+"_"+self.fileName), {
                            flags: 'w',
                            encoding:'UTF-8'
                        });
                        if(data){
                            var body = {record:[]};
                            for(var key in data){
                                var temp = data[key];
                                var tempStr = temp.outerId + split + temp.pType +split + temp.bType + split + temp.amount +split + temp.multiple + split + temp.number  + split + temp.printTime;
                                body.record.push(tempStr);
                            }
                            var xmlJson = {file:{head:head, body: body}};
                            writeData.write(xmlUtil.jsonToXml(xmlJson));
                            cb(null);
                        }else{
                            var xmlJson = {file:{head:head, body: ""}};
                            writeData.write(xmlUtil.jsonToXml(xmlJson));
                            cb(null);
                        }
                    }
                })
            }else{
                cb(null);
            }
        }
    ], function (err) {
        cb(err);
    })
}

LotDetailJob.prototype.run = function(cb)
{
    var self = this;
    async.waterfall([
        function (cb) {
            //创建目录
            if(fsUtil.createDirSync(self.baseDir)){
                cb(null);
            }else{
                cb(ec.E0999, "创建目录 + " + self.dir + " + 失败!");
            }
        },
        function(cb)
        {
            //生成文件
            self.createChannelFile(function(err ,data){
                cb(err);
            })
        }
    ], function (err, result) {
        cb(err, result);
    });
}

module.exports = LotDetailJob;
